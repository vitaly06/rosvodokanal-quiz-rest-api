generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           Int            @id @default(autoincrement())
  number       String         @unique
  fullName     String?
  branchId     Int?
  branch       Branch?        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  TestResult   TestResult[]
  PracticeTask PracticeTask[]
}

model Nomination {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  duration       String
  questionsCount Int
  questions      Question[]
  TestResult     TestResult[]
  Category       Category[]
}

model Branch {
  id      Int    @id @default(autoincrement())
  address String @unique
  User    User[]
}

model Question {
  id           Int          @id @default(autoincrement())
  question     String
  photoName    String?
  answers      Answer[]
  Nomination   Nomination   @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  nominationId Int
  Category     Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int?
  TestAnswer   TestAnswer[]
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String
  Nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  nominationId Int
  Question     Question[]
}

model Answer {
  id          Int          @id @default(autoincrement())
  answer      String
  correctness Boolean
  Question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  Int
  TestAnswer  TestAnswer[]
}

model TestResult {
  id           Int          @id @default(autoincrement())
  userId       Int
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  nominationId Int
  nomination   Nomination   @relation(fields: [nominationId], references: [id])
  score        Int
  total        Int
  percentage   Float
  duration     String
  startedAt    DateTime
  finishedAt   DateTime
  testAnswers  TestAnswer[]
}

model TestAnswer {
  id           Int        @id @default(autoincrement())
  testResult   TestResult @relation(fields: [testResultId], references: [id], onDelete: Cascade)
  testResultId Int
  questionId   Int
  question     Question   @relation(fields: [questionId], references: [id])
  optionId     Int?
  option       Answer?    @relation(fields: [optionId], references: [id])
}

model PracticeTask {
  id         Int  @id @default(autoincrement())
  taskNumber Int
  score      Int
  userId     Int
  user       User @relation(fields: [userId], references: [id])
}
