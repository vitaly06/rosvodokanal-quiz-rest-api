generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PracticNomination {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  BranchLineNumber BranchLineNumber[]
  UserLineNumber   UserLineNumber[]
}

model FullName {
  id                       Int     @id @default(autoincrement())
  fullName                 String
  branchId                 Int?
  branch                   Branch? @relation(fields: [branchId], references: [id], onDelete: Cascade)
  participatingNominations Int[]   @default([])
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   Int?    @unique // Связь один-к-одному
}

model User {
  id                  Int                   @id @default(autoincrement())
  number              String                @unique @db.Char(6)
  // branchId                 Int?
  // branch                   Branch?               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  // participatingNominations Int[]                 @default([])
  fullName            FullName? // Связь один-к-одному
  TestResult          TestResult[]
  AvrPlumberTask      AvrPlumberTask[]
  AvrSewerPlumberTask AvrSewerPlumberTask[]
  CarDriverTask       CarDriverTask[]
  TruckDriverTask     TruckDriverTask[]
  ChemLabTechnician   ChemLabTechnician[]
  WelderTask          WelderTask[]
  UserLineNumber      UserLineNumber[]
  // Branch              Branch?               @relation(fields: [branchId], references: [id])
  // branchId            Int?
}

model Nomination {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  duration            String
  questionsCount      Int
  questions           Question[]
  TestResult          TestResult[]
  Category            Category[]
  PracticeTask        PracticeTask[]
  AvrMechanicTask     AvrMechanicTask[]
  WelderTask          WelderTask[]
  AvrPlumberTask      AvrPlumberTask[]
  AvrSewerTask        AvrSewerTask[]
  AvrSewerPlumberTask AvrSewerPlumberTask[]
  CarDriverTask       CarDriverTask[]
  TruckDriverTask     TruckDriverTask[]
  ChemLabTechnician   ChemLabTechnician[]
}

model Branch {
  id      Int    @id @default(autoincrement())
  address String @unique

  participatingNominations Int[] // Бригадные мероприятия, в которых участвует филиал
  // User                     User[]
  PracticeTask             PracticeTask[]
  AvrMechanicTask          AvrMechanicTask[]
  WelderTask               WelderTask[]
  AvrPlumberTask           AvrPlumberTask[]
  AvrSewerTask             AvrSewerTask[]
  AvrSewerPlumberTask      AvrSewerPlumberTask[]
  CarDriverTask            CarDriverTask[]
  TruckDriverTask          TruckDriverTask[]
  ChemLabTechnician        ChemLabTechnician[]
  BranchLineNumber         BranchLineNumber[]
  FullName                 FullName[]
}

model Question {
  id           Int          @id @default(autoincrement())
  question     String
  photoName    String?
  answers      Answer[]
  Nomination   Nomination   @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  nominationId Int
  Category     Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int?
  TestAnswer   TestAnswer[]
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String
  Nomination   Nomination @relation(fields: [nominationId], references: [id], onDelete: Cascade)
  nominationId Int
  Question     Question[]
}

model Answer {
  id          Int          @id @default(autoincrement())
  answer      String
  correctness Boolean
  Question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  Int
  TestAnswer  TestAnswer[]
}

model TestResult {
  id           Int          @id @default(autoincrement())
  userId       Int
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  nominationId Int
  nomination   Nomination   @relation(fields: [nominationId], references: [id])
  score        Int
  total        Int
  percentage   Float
  duration     String
  startedAt    DateTime
  finishedAt   DateTime
  testAnswers  TestAnswer[]
}

model TestAnswer {
  id           Int        @id @default(autoincrement())
  testResult   TestResult @relation(fields: [testResultId], references: [id], onDelete: Cascade)
  testResultId Int
  questionId   Int
  question     Question   @relation(fields: [questionId], references: [id])
  optionId     Int?
  option       Answer?    @relation(fields: [optionId], references: [id])
}

model PracticeTask {
  id           Int         @id @default(autoincrement())
  taskNumber   Int
  score        Int
  time         String?     @db.VarChar(5) // Формат мм:сс
  penalty      Int?        @default(0)
  branchId     Int
  branch       Branch      @relation(fields: [branchId], references: [id])
  nominationId Int?
  nomination   Nomination? @relation(fields: [nominationId], references: [id])

  @@unique([branchId, nominationId], name: "branch_nomination_task")
}

model BranchLineNumber {
  id                  Int               @id @default(autoincrement())
  branch              Branch            @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId            Int
  practicNomination   PracticNomination @relation(fields: [practicNominationId], references: [id], onDelete: Cascade)
  practicNominationId Int
  lineNumber          Int?

  // Уникальный ключ: один филиал может иметь только один номер линии в номинации
  @@unique([branchId, practicNominationId], name: "branch_practic_line_unique")
}

model UserLineNumber {
  id                  Int               @id @default(autoincrement())
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int
  practicNomination   PracticNomination @relation(fields: [practicNominationId], references: [id], onDelete: Cascade)
  practicNominationId Int
  lineNumber          Int?

  // Уникальный ключ: один участник может иметь только один номер линии в номинации
  @@unique([userId, practicNominationId], name: "user_practic_line_unique")
}

// Лучшая бригада  АВР по водопроводным сетям - 2025
model AvrMechanicTask {
  id             Int     @id @default(autoincrement())
  taskNumber     Int // Номер этапа (1, 2, 3)
  time           String  @db.VarChar(5) // Время в формате мм:сс (например "15:30")
  timeScore      Int // Баллы за время (30-60)
  hydraulicTest  Boolean // Гидравлические испытания (+/-)
  safetyPenalty  Int // Штраф по охране труда (0-15)
  culturePenalty Int // Штраф за культуру (0-5)
  qualityPenalty Int // Штраф за качество
  stageScore     Int // Баллы за этап (вычисляемое поле)

  branchId     Int
  branch       Branch     @relation(fields: [branchId], references: [id])
  nominationId Int
  nomination   Nomination @relation(fields: [nominationId], references: [id])

  @@unique([branchId, nominationId, taskNumber], name: "branchId_nominationId_taskNumber")
}

// Сварщик
model WelderTask {
  id                  Int     @id @default(autoincrement())
  taskNumber          Int // 1 или 2 этап
  time                String? @db.VarChar(5) // Время в формате мм:сс
  timeScore           Float // Баллы за время (вычисляемое)
  culturePenalty      Float // Штраф за культуру
  safetyPenalty       Float // Штраф за охрану труда
  operationalControl  Float // Операционный контроль
  visualMeasurement   Float // Визуально-измерительный контроль
  radiographicControl Float // Радиографический контроль
  stageScore          Float // Общий балл за этап

  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchId     Int
  branch       Branch     @relation(fields: [branchId], references: [id])
  nominationId Int
  nomination   Nomination @relation(fields: [nominationId], references: [id])

  @@unique([branchId, nominationId, taskNumber, userId], name: "welder_unique_task")
}

// Лучший слесарь АВР по водопроводным сетям
model AvrPlumberTask {
  id             Int      @id @default(autoincrement())
  time           String   @db.VarChar(5) // Время в формате мм:сс
  timeScore      Float // Баллы за время (50-25)
  hydraulicTest  Boolean // Гидравлические испытания (+/-)
  safetyPenalty  Float // Штраф по охране труда (0-15)
  culturePenalty Float // Штраф за культуру (0-5)
  qualityPenalty Float // Штраф за качество
  stageScore     Float // Баллы за этап
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Связь с пользователем
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Связь с филиалом через пользователя
  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  // Связь с номинацией
  nomination   Nomination @relation(fields: [nominationId], references: [id])
  nominationId Int

  // Уникальный ключ: один пользователь может иметь только одну запись в номинации
  @@unique([userId, nominationId], name: "avr_plumber_user_nomination_unique")
}

// Лучшая бригада  АВР по канализационным сетям - 2025
model AvrSewerTask {
  id             Int        @id @default(autoincrement())
  taskNumber     Int // Номер этапа (1-4)
  time           String     @db.VarChar(5) // Время в формате мм:сс
  timeScore      Float // Баллы за время (вычисляется)
  hydraulicTest  Boolean // Гидравлическое испытание (+/-)
  safetyPenalty  Float // Штраф по охране труда (0-15)
  culturePenalty Float // Штраф за культуру (0-5)
  qualityPenalty Float // Штраф за качество
  stageScore     Float // Баллы за этап (вычисляется)
  branchId       Int
  branch         Branch     @relation(fields: [branchId], references: [id])
  nominationId   Int
  nomination     Nomination @relation(fields: [nominationId], references: [id])

  @@unique([branchId, nominationId, taskNumber], name: "avr_sewer_unique_task")
}

// Лучший слесарь АВР по канализационным сетям - 2025
model AvrSewerPlumberTask {
  id             Int      @id @default(autoincrement())
  time           String   @db.VarChar(5) // Время в формате мм:сс
  timeScore      Float // Баллы за время (50-25)
  hydraulicTest  Boolean // Гидравлические испытания (+/-)
  safetyPenalty  Float    @default(0) // Штраф по охране труда (0-15)
  culturePenalty Float    @default(0) // Штраф за культуру (0-2)
  qualityPenalty Float    @default(0) // Штраф за качество
  stageScore     Float // Баллы за этап
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Связи
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchId     Int
  branch       Branch     @relation(fields: [branchId], references: [id])
  nominationId Int
  nomination   Nomination @relation(fields: [nominationId], references: [id])

  @@unique([userId, nominationId], name: "avr_sewer_plumber_unique")
}

// "Лучший водитель автомобиля  - 2025"
model CarDriverTask {
  id            Int    @id @default(autoincrement())
  // Теоретическая часть
  theoryCorrect Int    @default(0) // Количество правильных ответов
  theoryTime    String @db.VarChar(5) // Затраченное время (мм:сс)
  theoryPlace   Int? // Место
  theoryPoints  Int? // Количество очков

  // Практическая часть
  practicePenalty Int    @default(0) // Штрафные баллы за ошибки
  practiceTime    String @db.VarChar(5) // Время прохождения дистанции
  practiceSum     Int? // Сумма баллов (время + штраф)
  practicePlace   Int? // Место
  practicePoints  Int? // Количество очков

  // Итоговый расчет
  totalTheoryPoints   Int? // Очки за теорию
  totalPracticePoints Int? // Очки за практику
  totalPoints         Int? // Общее количество очков
  finalPlace          Int? // Итоговое место

  // Связи
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchId     Int
  branch       Branch     @relation(fields: [branchId], references: [id])
  nominationId Int
  nomination   Nomination @relation(fields: [nominationId], references: [id])

  @@unique([userId, nominationId], name: "car_driver_unique")
}

// Лучший водитель автомобиля (грузового) - 2025
model TruckDriverTask {
  id            Int    @id @default(autoincrement())
  // Теоретическая часть
  theoryCorrect Int    @default(0)
  theoryTime    String @db.VarChar(5)
  theoryPlace   Int?
  theoryPoints  Int?

  // Практическая часть
  practicePenalty Int    @default(0)
  practiceTime    String @db.VarChar(5)
  practiceSum     Int?
  practicePlace   Int?
  practicePoints  Int?

  // Итоговый расчет
  totalTheoryPoints   Int?
  totalPracticePoints Int?
  totalPoints         Int?
  finalPlace          Int?

  // Связи
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchId     Int
  branch       Branch     @relation(fields: [branchId], references: [id])
  nominationId Int
  nomination   Nomination @relation(fields: [nominationId], references: [id])

  @@unique([userId, nominationId], name: "truck_driver_unique")
}

// Лучший лаборант химического анализа - 2025

model ChemLabTechnician {
  id               Int    @id @default(autoincrement())
  // Этап 1a
  stage1aTime      String @db.VarChar(5)
  stage1aTimeScore Float?
  stage1aQuality   Float  @default(0)
  stage1aCulture   Float  @default(0)
  stage1aSafety    Float  @default(0)
  stage1aTotal     Float?

  // Этап 1b
  stage1bTime      String @db.VarChar(5)
  stage1bTimeScore Float?
  stage1bQuality   Float  @default(0)
  stage1bCulture   Float  @default(0)
  stage1bSafety    Float  @default(0)
  stage1bTotal     Float?

  // Этап 2
  stage2Time      String @db.VarChar(5)
  stage2TimeScore Float?
  stage2Quality   Float  @default(0)
  stage2Culture   Float  @default(0)
  stage2Safety    Float  @default(0)
  stage2Total     Float?

  // Итоговые результаты
  totalPoints Float?
  finalPlace  Int?

  // Связи
  userId       Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  branchId     Int
  branch       Branch     @relation(fields: [branchId], references: [id])
  nominationId Int
  nomination   Nomination @relation(fields: [nominationId], references: [id])

  @@unique([userId, nominationId], name: "chem_lab_technician_unique")
}
